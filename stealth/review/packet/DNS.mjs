
import { Buffer, isFunction } from '../../../base/index.mjs';
import { describe, finish   } from '../../../covert/index.mjs';
import { DNS                } from '../../../stealth/source/packet/DNS.mjs';
import { IP                 } from '../../../stealth/source/parser/IP.mjs';



const Connection = function(type) {
	this.type = type;
};

Connection.prototype = {
	[Symbol.toStringTag]: 'Connection'
};



describe('DNS.decode()/A/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x96, 0x9a, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x29,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x0a, 0x00, 0x08, 0x97, 0xc2, 0xbd, 0x6d,
		0xfe, 0x48, 0xb9, 0x31
	]);
	let packet = {
		headers: {
			'@id':   38554,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'A',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/A/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x96, 0x9a, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x01, 0x00, 0x01, 0x00, 0x00, 0xfd, 0xd7, 0x00,
		0x04, 0x5d, 0xb8, 0xd8, 0x22, 0x00, 0x00, 0x29,
		0x04, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c,
		0x00, 0x0a, 0x00, 0x18, 0x97, 0xc2, 0xbd, 0x6d,
		0xfe, 0x48, 0xb9, 0x31, 0x98, 0xe6, 0x7c, 0x76,
		0x60, 0x5f, 0x63, 0x38, 0x91, 0xc4, 0x11, 0xa9,
		0xcb, 0x8c, 0x3b, 0x5f
	]);
	let packet = {
		headers: {
			'@id':   38554,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'A',
				value:  null
			}],
			answers: [{
				domain: 'example.com',
				type:   'A',
				value:  IP.parse('93.184.216.34')
			}]
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/AAAA/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x68, 0xbf, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x29,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x0a, 0x00, 0x08, 0xce, 0x2b, 0x43, 0x6f,
		0xf4, 0x93, 0x6f, 0x32
	]);
	let packet = {
		headers: {
			'@id':   26815,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'AAAA',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/AAAA/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x68, 0xbf, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x1c, 0x00, 0x01, 0x00, 0x00, 0xe0, 0xf9, 0x00,
		0x10, 0x26, 0x06, 0x28, 0x00, 0x02, 0x20, 0x00,
		0x01, 0x02, 0x48, 0x18, 0x93, 0x25, 0xc8, 0x19,
		0x46, 0x00, 0x00, 0x29, 0x04, 0xd0, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x1c, 0x00, 0x0a, 0x00, 0x18,
		0xce, 0x2b, 0x43, 0x6f, 0xf4, 0x93, 0x6f, 0x32,
		0xc0, 0xe0, 0x51, 0xac, 0x60, 0x5f, 0x62, 0xb5,
		0x9b, 0xb2, 0x3c, 0xb1, 0xcb, 0xae, 0xd2, 0x90
	]);
	let packet = {
		headers: {
			'@id':   26815,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'AAAA',
				value:  null
			}],
			answers: [{
				domain: 'example.com',
				type:   'AAAA',
				value:  IP.parse('2606:2800:220:1:248:1893:25c8:1946')
			}]
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/CNAME/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x59, 0x6b, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x70, 0x72, 0x6f,
		0x70, 0x68, 0x65, 0x74, 0x05, 0x68, 0x65, 0x69,
		0x73, 0x65, 0x02, 0x64, 0x65, 0x00, 0x00, 0x05,
		0x00, 0x01, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0a, 0x00,
		0x08, 0x68, 0x2a, 0x8f, 0x91, 0x5f, 0x27, 0xd2,
		0xe5
	]);
	let packet = {
		headers: {
			'@id':   22891,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'prophet.heise.de',
				type:   'CNAME',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/CNAME/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x59, 0x6b, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x70, 0x72, 0x6f,
		0x70, 0x68, 0x65, 0x74, 0x05, 0x68, 0x65, 0x69,
		0x73, 0x65, 0x02, 0x64, 0x65, 0x00, 0x00, 0x05,
		0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01,
		0x00, 0x00, 0xd1, 0x64, 0x00, 0x16, 0x07, 0x68,
		0x65, 0x69, 0x73, 0x65, 0x30, 0x32, 0x08, 0x77,
		0x65, 0x62, 0x74, 0x72, 0x65, 0x6b, 0x6b, 0x03,
		0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x29, 0x04,
		0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,
		0x0a, 0x00, 0x18, 0x68, 0x2a, 0x8f, 0x91, 0x5f,
		0x27, 0xd2, 0xe5, 0x55, 0x86, 0x65, 0x1f, 0x60,
		0x5f, 0x69, 0xcc, 0x7b, 0xf8, 0xfe, 0x5a, 0xb6,
		0xc2, 0xee, 0xae
	]);
	let packet = {
		headers: {
			'@id':   22891,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'prophet.heise.de',
				type:   'CNAME',
				value:  null
			}],
			answers: [{
				domain: 'prophet.heise.de',
				type:   'CNAME',
				value:  'heise02.webtrekk.net'
			}]
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/MX/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x70, 0x52, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x69, 0x74,
		0x68, 0x75, 0x62, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x29, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00,
		0x0a, 0x00, 0x08, 0x83, 0x33, 0x6c, 0x49, 0x04,
		0x1f, 0x12, 0x05
	]);
	let packet = {
		headers: {
			'@id':   28754,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'github.com',
				type:   'MX',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/MX/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x70, 0x52, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x69, 0x74,
		0x68, 0x75, 0x62, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x0f, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x0f,
		0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x13,
		0x00, 0x01, 0x05, 0x61, 0x73, 0x70, 0x6d, 0x78,
		0x01, 0x6c, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
		0x65, 0xc0, 0x13, 0xc0, 0x0c, 0x00, 0x0f, 0x00,
		0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x09, 0x00,
		0x05, 0x04, 0x61, 0x6c, 0x74, 0x31, 0xc0, 0x2a,
		0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00,
		0x0e, 0x10, 0x00, 0x09, 0x00, 0x0a, 0x04, 0x61,
		0x6c, 0x74, 0x33, 0xc0, 0x2a, 0xc0, 0x0c, 0x00,
		0x0f, 0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00,
		0x09, 0x00, 0x05, 0x04, 0x61, 0x6c, 0x74, 0x32,
		0xc0, 0x2a, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01,
		0x00, 0x00, 0x0e, 0x10, 0x00, 0x09, 0x00, 0x0a,
		0x04, 0x61, 0x6c, 0x74, 0x34, 0xc0, 0x2a, 0x00,
		0x00, 0x29, 0x04, 0xd0, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x1c, 0x00, 0x0a, 0x00, 0x18, 0x83, 0x33,
		0x6c, 0x49, 0x04, 0x1f, 0x12, 0x05, 0xd0, 0x41,
		0x18, 0x11, 0x60, 0x6c, 0x62, 0x7e, 0xa8, 0xf0,
		0x2f, 0xaf, 0x08, 0x92, 0x4e, 0x44
	]);
	let packet = {
		headers: {
			'@id':   28754,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'github.com',
				type:   'MX',
				value:  null
			}],
			answers: [{
				domain: 'github.com',
				type:   'MX',
				value:  'aspmx.l.google.com',
				weight: 1
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt1.aspmx.l.google.com',
				weight: 5
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt2.aspmx.l.google.com',
				weight: 5
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt3.aspmx.l.google.com',
				weight: 10
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt4.aspmx.l.google.com',
				weight: 10
			}]
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/NS/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x2b, 0x42, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x29,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x0a, 0x00, 0x08, 0xc4, 0x48, 0x51, 0x35,
		0x86, 0xb3, 0x78, 0xd4
	]);
	let packet = {
		headers: {
			'@id':   11074,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'NS',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/NS/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x2b, 0x42, 0x81, 0x80, 0x00, 0x01, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x02, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x02, 0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00,
		0x14, 0x01, 0x61, 0x0c, 0x69, 0x61, 0x6e, 0x61,
		0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
		0x03, 0x6e, 0x65, 0x74, 0x00, 0xc0, 0x0c, 0x00,
		0x02, 0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00,
		0x04, 0x01, 0x62, 0xc0, 0x2b, 0x00, 0x00, 0x29,
		0x04, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c,
		0x00, 0x0a, 0x00, 0x18, 0xc4, 0x48, 0x51, 0x35,
		0x86, 0xb3, 0x78, 0xd4, 0x96, 0x22, 0x5c, 0xff,
		0x60, 0x5f, 0x6b, 0x69, 0x27, 0x16, 0x8d, 0x1e,
		0xf3, 0xa0, 0x28, 0x7e
	]);
	let packet = {
		headers: {
			'@id':   11074,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'NS',
				value:  null
			}],
			answers: [{
				domain: 'example.com',
				type:   'NS',
				value:  'a.iana-servers.net'
			}, {
				domain: 'example.com',
				type:   'NS',
				value:  'b.iana-servers.net'
			}]
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/PTR/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer1 = Buffer.from([
		0x1a, 0xc8, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x03, 0x32, 0x34, 0x36,
		0x03, 0x31, 0x36, 0x33, 0x03, 0x32, 0x31, 0x37,
		0x02, 0x39, 0x35, 0x07, 0x69, 0x6e, 0x2d, 0x61,
		0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70, 0x61,
		0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x29,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x0a, 0x00, 0x08, 0x1e, 0x7a, 0xb3, 0xc2,
		0x91, 0xe8, 0xda, 0x22
	]);
	let packet1 = {
		headers: {
			'@id':   6856,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: null,
				type:   'PTR',
				value:  IP.parse('95.217.163.246')
			}],
			answers: []
		}
	};

	let buffer2 = Buffer.from([
		0xc1, 0xc3, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x01, 0x31, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x66, 0x01, 0x31,
		0x01, 0x62, 0x01, 0x36, 0x01, 0x30, 0x01, 0x31,
		0x01, 0x30, 0x01, 0x63, 0x01, 0x39, 0x01, 0x66,
		0x01, 0x34, 0x01, 0x30, 0x01, 0x31, 0x01, 0x30,
		0x01, 0x61, 0x01, 0x32, 0x03, 0x69, 0x70, 0x36,
		0x04, 0x61, 0x72, 0x70, 0x61, 0x00, 0x00, 0x0c,
		0x00, 0x01, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0a, 0x00,
		0x08, 0xfb, 0xb2, 0x09, 0x25, 0xf5, 0xbd, 0x88,
		0x51
	]);
	let packet2 = {
		headers: {
			'@id':   49603,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: null,
				type:   'PTR',
				value:  IP.parse('2a01:04f9:c010:6b1f:0000:0000:0000:0001')
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer1), packet1);
	assert(DNS.decode(null, buffer2), packet2);

});

describe('DNS.decode()/PTR/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer1 = Buffer.from([
		0x1a, 0xc8, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x01, 0x03, 0x32, 0x34, 0x36,
		0x03, 0x31, 0x36, 0x33, 0x03, 0x32, 0x31, 0x37,
		0x02, 0x39, 0x35, 0x07, 0x69, 0x6e, 0x2d, 0x61,
		0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70, 0x61,
		0x00, 0x00, 0x0c, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x0c, 0x00, 0x01, 0x00, 0x01, 0x3d, 0x90, 0x00,
		0x0f, 0x09, 0x61, 0x72, 0x63, 0x68, 0x6c, 0x69,
		0x6e, 0x75, 0x78, 0x03, 0x6f, 0x72, 0x67, 0x00,
		0x00, 0x00, 0x29, 0x04, 0xd0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00
	]);
	let packet1 = {
		headers: {
			'@id':   6856,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: null,
				type:   'PTR',
				value:  IP.parse('95.217.163.246')
			}],
			answers: [{
				domain: 'archlinux.org',
				type:   'PTR',
				value:  IP.parse('95.217.163.246')
			}]
		}
	};

	let buffer2 = Buffer.from([
		0xc1, 0xc3, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x01, 0x01, 0x31, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x01, 0x66, 0x01, 0x31,
		0x01, 0x62, 0x01, 0x36, 0x01, 0x30, 0x01, 0x31,
		0x01, 0x30, 0x01, 0x63, 0x01, 0x39, 0x01, 0x66,
		0x01, 0x34, 0x01, 0x30, 0x01, 0x31, 0x01, 0x30,
		0x01, 0x61, 0x01, 0x32, 0x03, 0x69, 0x70, 0x36,
		0x04, 0x61, 0x72, 0x70, 0x61, 0x00, 0x00, 0x0c,
		0x00, 0x01, 0xc0, 0x0c, 0x00, 0x0c, 0x00, 0x01,
		0x00, 0x01, 0x4e, 0xd4, 0x00, 0x0f, 0x09, 0x61,
		0x72, 0x63, 0x68, 0x6c, 0x69, 0x6e, 0x75, 0x78,
		0x03, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 0x29,
		0x04, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	]);
	let packet2 = {
		headers: {
			'@id':   49603,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: null,
				type:   'PTR',
				value:  IP.parse('2a01:04f9:c010:6b1f:0000:0000:0000:0001')
			}],
			answers: [{
				domain: 'archlinux.org',
				type:   'PTR',
				value:  IP.parse('2a01:04f9:c010:6b1f:0000:0000:0000:0001')
			}]
		}
	};

	assert(DNS.decode(null, buffer1), packet1);
	assert(DNS.decode(null, buffer2), packet2);

});

describe('DNS.decode()/SRV/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x0b, 0x0f, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x08, 0x5f, 0x73, 0x74,
		0x65, 0x61, 0x6c, 0x74, 0x68, 0x04, 0x5f, 0x77,
		0x73, 0x73, 0x07, 0x74, 0x68, 0x6f, 0x6c, 0x69,
		0x61, 0x6e, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
		0x72, 0x6b, 0x00, 0x00, 0x21, 0x00, 0x01, 0x00,
		0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x0c, 0x00, 0x0a, 0x00, 0x08, 0xd5, 0xaa,
		0xab, 0x40, 0xb9, 0x7d, 0x86, 0x08
	]);
	let packet = {
		headers: {
			'@id':   2831,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: '_stealth._wss.tholian.network',
				type:   'SRV',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/SRV/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x0b, 0x0f, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x01, 0x08, 0x5f, 0x73, 0x74,
		0x65, 0x61, 0x6c, 0x74, 0x68, 0x04, 0x5f, 0x77,
		0x73, 0x73, 0x07, 0x74, 0x68, 0x6f, 0x6c, 0x69,
		0x61, 0x6e, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
		0x72, 0x6b, 0x00, 0x00, 0x21, 0x00, 0x01, 0xc0,
		0x0c, 0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x0e,
		0x10, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xff,
		0x98, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x07,
		0x74, 0x68, 0x6f, 0x6c, 0x69, 0x61, 0x6e, 0x07,
		0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x00,
		0x00, 0x00, 0x29, 0x04, 0xd0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x00, 0x0a, 0x00, 0x18, 0xd5,
		0xaa, 0xab, 0x40, 0xb9, 0x7d, 0x86, 0x08, 0x2f,
		0xc7, 0xbb, 0xe9, 0x60, 0x6c, 0x3f, 0xba, 0x32,
		0x85, 0xfa, 0x7c, 0x92, 0x7d, 0x8c, 0xa8
	]);
	let packet = {
		headers: {
			'@id':   2831,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: '_stealth._wss.tholian.network',
				type:   'SRV',
				value:  null
			}],
			answers: [{
				domain: '_stealth._wss.tholian.network',
				type:   'SRV',
				value:  'radar.tholian.network',
				weight: 0,
				port:   65432
			}]
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/TXT/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x43, 0x5f, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x29,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x0a, 0x00, 0x08, 0x41, 0x63, 0x6f, 0x57,
		0x65, 0x33, 0x74, 0x1a
	]);
	let packet = {
		headers: {
			'@id':   17247,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'TXT',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/TXT/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x43, 0x5f, 0x81, 0x80, 0x00, 0x01, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x10, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x10, 0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00,
		0x21, 0x20, 0x38, 0x6a, 0x35, 0x6e, 0x66, 0x71,
		0x6c, 0x64, 0x32, 0x30, 0x7a, 0x70, 0x63, 0x79,
		0x72, 0x38, 0x78, 0x6a, 0x77, 0x30, 0x79, 0x64,
		0x63, 0x66, 0x71, 0x39, 0x72, 0x6b, 0x38, 0x68,
		0x67, 0x6d, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01,
		0x00, 0x01, 0x51, 0x80, 0x00, 0x0c, 0x0b, 0x76,
		0x3d, 0x73, 0x70, 0x66, 0x31, 0x20, 0x2d, 0x61,
		0x6c, 0x6c, 0x00, 0x00, 0x29, 0x04, 0xd0, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x0a, 0x00,
		0x18, 0x41, 0x63, 0x6f, 0x57, 0x65, 0x33, 0x74,
		0x1a, 0xa9, 0xd6, 0xea, 0xf5, 0x60, 0x5f, 0x68,
		0xd5, 0x83, 0x7e, 0xb0, 0x93, 0xc4, 0x8f, 0xba,
		0xa5
	]);
	let packet = {
		headers: {
			'@id':   17247,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'TXT',
				value:  null
			}],
			answers: [{
				domain: 'example.com',
				type:   'TXT',
				value:  [
					Buffer.from('8j5nfqld20zpcyr8xjw0ydcfq9rk8hgm', 'utf8')
				]
			}, {
				domain: 'example.com',
				type:   'TXT',
				value:  [
					Buffer.from('v=spf1 -all', 'utf8')
				]
			}]
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/NAMEWRECK/request', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// question: example.com (without NULL terminator)
		0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0xc0, 12 + 18, // recursive pointer
		0x00, 0x01, 0x00, 0x01,

		// question: example.com (without NULL terminator)
		0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0xc0, 12, // recursive pointer
		0x00, 0x01, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   0,
			'@type': 'request'
		},
		payload: {
			questions: [],
			answers:   []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.decode()/NAMEWRECK/response', function(assert) {

	assert(isFunction(DNS.decode), true);

	let buffer = Buffer.from([
		0x00, 0x00, 0x81, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,

		// example.com (with NULL terminator)
		0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x01, 0x00, 0x01,

		// answer: example.com (without NULL terminator)
		0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0xc0, 12 + 17 + 26, // recursive pointer
		0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00,
		0x01, 0x03, 0x03, 0x07,

		// answer: example.com (without NULL terminator)
		0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0xc0, 12 + 17, // recursive pointer
		0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00,
		0x01, 0x03, 0x03, 0x07
	]);
	let packet = {
		headers: {
			'@id':   0,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'A',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.decode(null, buffer), packet);

});

describe('DNS.encode()/A/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x01, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'A',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/A/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x5d, 0xb8, 0xd8, 0x22
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'A',
				value:  null
			}],
			answers: [{
				domain: 'example.com',
				type:   'A',
				value:  IP.parse('93.184.216.34')
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/AAAA/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x1c, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'AAAA',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/AAAA/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x81, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x26, 0x06, 0x28, 0x00, 0x02, 0x20, 0x00,
		0x01, 0x02, 0x48, 0x18, 0x93, 0x25, 0xc8, 0x19,
		0x46
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'AAAA',
				value:  null
			}],
			answers: [{
				domain: 'example.com',
				type:   'AAAA',
				value:  IP.parse('2606:2800:220:1:248:1893:25c8:1946')
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/CNAME/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x70, 0x72, 0x6f,
		0x70, 0x68, 0x65, 0x74, 0x05, 0x68, 0x65, 0x69,
		0x73, 0x65, 0x02, 0x64, 0x65, 0x00, 0x00, 0x05,
		0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'prophet.heise.de',
				type:   'CNAME',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/CNAME/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x81, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x70, 0x72, 0x6f,
		0x70, 0x68, 0x65, 0x74, 0x05, 0x68, 0x65, 0x69,
		0x73, 0x65, 0x02, 0x64, 0x65, 0x00, 0x00, 0x05,
		0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x07, 0x68,
		0x65, 0x69, 0x73, 0x65, 0x30, 0x32, 0x08, 0x77,
		0x65, 0x62, 0x74, 0x72, 0x65, 0x6b, 0x6b, 0x03,
		0x6e, 0x65, 0x74, 0x00
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'prophet.heise.de',
				type:   'CNAME',
				value:  null
			}],
			answers: [{
				domain: 'prophet.heise.de',
				type:   'CNAME',
				value:  'heise02.webtrekk.net'
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/MX/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x06, 0x67, 0x69, 0x74,
		0x68, 0x75, 0x62, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x0f, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'github.com',
				type:   'MX',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/MX/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x81, 0x00, 0x00, 0x01, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x06, 0x67, 0x69, 0x74,
		0x68, 0x75, 0x62, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x0f, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x0f,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
		0x00, 0x01, 0x05, 0x61, 0x73, 0x70, 0x6d, 0x78,
		0x01, 0x6c, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
		0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x0c,
		0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x1b, 0x00, 0x05, 0x04, 0x61, 0x6c, 0x74,
		0x31, 0x05, 0x61, 0x73, 0x70, 0x6d, 0x78, 0x01,
		0x6c, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x0c, 0x00,
		0x0f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1b, 0x00, 0x05, 0x04, 0x61, 0x6c, 0x74, 0x32,
		0x05, 0x61, 0x73, 0x70, 0x6d, 0x78, 0x01, 0x6c,
		0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03,
		0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x0c, 0x00, 0x0f,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
		0x00, 0x0a, 0x04, 0x61, 0x6c, 0x74, 0x33, 0x05,
		0x61, 0x73, 0x70, 0x6d, 0x78, 0x01, 0x6c, 0x06,
		0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63,
		0x6f, 0x6d, 0x00, 0xc0, 0x0c, 0x00, 0x0f, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00,
		0x0a, 0x04, 0x61, 0x6c, 0x74, 0x34, 0x05, 0x61,
		0x73, 0x70, 0x6d, 0x78, 0x01, 0x6c, 0x06, 0x67,
		0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f,
		0x6d, 0x00
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'github.com',
				type:   'MX',
				value:  null
			}],
			answers: [{
				domain: 'github.com',
				type:   'MX',
				value:  'aspmx.l.google.com',
				weight: 1
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt1.aspmx.l.google.com',
				weight: 5
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt2.aspmx.l.google.com',
				weight: 5
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt3.aspmx.l.google.com',
				weight: 10
			}, {
				domain: 'github.com',
				type:   'MX',
				value:  'alt4.aspmx.l.google.com',
				weight: 10
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/NS/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x02, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'NS',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/NS/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x81, 0x00, 0x00, 0x01, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x02, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x01, 0x61, 0x0c, 0x69, 0x61, 0x6e, 0x61,
		0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
		0x03, 0x6e, 0x65, 0x74, 0x00, 0xc0, 0x0c, 0x00,
		0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x14, 0x01, 0x62, 0x0c, 0x69, 0x61, 0x6e, 0x61,
		0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
		0x03, 0x6e, 0x65, 0x74, 0x00
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'example.com',
				type:   'NS',
				value:  null
			}],
			answers: [{
				domain: 'example.com',
				type:   'NS',
				value:  'a.iana-servers.net'
			}, {
				domain: 'example.com',
				type:   'NS',
				value:  'b.iana-servers.net'
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/PTR/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x03, 0x32, 0x34, 0x36,
		0x03, 0x31, 0x36, 0x33, 0x03, 0x32, 0x31, 0x37,
		0x02, 0x39, 0x35, 0x07, 0x69, 0x6e, 0x2d, 0x61,
		0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70, 0x61,
		0x00, 0x00, 0x0c, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: null,
				type:   'PTR',
				value:  IP.parse('95.217.163.246')
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/PTR/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x81, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x03, 0x32, 0x34, 0x36,
		0x03, 0x31, 0x36, 0x33, 0x03, 0x32, 0x31, 0x37,
		0x02, 0x39, 0x35, 0x07, 0x69, 0x6e, 0x2d, 0x61,
		0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70, 0x61,
		0x00, 0x00, 0x0c, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0f, 0x09, 0x61, 0x72, 0x63, 0x68, 0x6c, 0x69,
		0x6e, 0x75, 0x78, 0x03, 0x6f, 0x72, 0x67, 0x00
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: null,
				type:   'PTR',
				value:  IP.parse('95.217.163.246')
			}],
			answers: [{
				domain: 'archlinux.org',
				type:   'PTR',
				value:  IP.parse('95.217.163.246')
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/SRV/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x5f, 0x73, 0x74,
		0x65, 0x61, 0x6c, 0x74, 0x68, 0x04, 0x5f, 0x77,
		0x73, 0x73, 0x07, 0x74, 0x68, 0x6f, 0x6c, 0x69,
		0x61, 0x6e, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
		0x72, 0x6b, 0x00, 0x00, 0x21, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: '_stealth._wss.tholian.network',
				type:   'SRV',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/SRV/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x81, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x5f, 0x73, 0x74,
		0x65, 0x61, 0x6c, 0x74, 0x68, 0x04, 0x5f, 0x77,
		0x73, 0x73, 0x07, 0x74, 0x68, 0x6f, 0x6c, 0x69,
		0x61, 0x6e, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
		0x72, 0x6b, 0x00, 0x00, 0x21, 0x00, 0x01, 0xc0,
		0x0c, 0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xff,
		0x98, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x07,
		0x74, 0x68, 0x6f, 0x6c, 0x69, 0x61, 0x6e, 0x07,
		0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x00
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: '_stealth._wss.tholian.network',
				type:   'SRV',
				value:  null
			}],
			answers: [{
				domain: '_stealth._wss.tholian.network',
				type:   'SRV',
				value:  'radar.tholian.network',
				weight: 0,
				port:   65432
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/TXT/request', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('client');

	let buffer = Buffer.from([
		0x34, 0x19, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x05, 0x72, 0x61, 0x64,
		0x61, 0x72, 0x07, 0x74, 0x68, 0x6f, 0x6c, 0x69,
		0x61, 0x6e, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
		0x72, 0x6b, 0x00, 0x00, 0x10, 0x00, 0x01
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'request'
		},
		payload: {
			questions: [{
				domain: 'radar.tholian.network',
				type:   'TXT',
				value:  null
			}],
			answers: []
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});

describe('DNS.encode()/TXT/response', function(assert) {

	assert(isFunction(DNS.encode), true);

	let connection = new Connection('server');

	let buffer = Buffer.from([
		0x34, 0x19, 0x81, 0x00, 0x00, 0x01, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x05, 0x72, 0x61, 0x64,
		0x61, 0x72, 0x07, 0x74, 0x68, 0x6f, 0x6c, 0x69,
		0x61, 0x6e, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
		0x72, 0x6b, 0x00, 0x00, 0x10, 0x00, 0x01, 0xc0,
		0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x16, 0x15, 0x76, 0x65, 0x72, 0x73,
		0x69, 0x6f, 0x6e, 0x3d, 0x58, 0x30, 0x3a, 0x32,
		0x30, 0x32, 0x31, 0x2d, 0x31, 0x32, 0x2d, 0x33,
		0x31, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x15, 0x14, 0x63, 0x6f,
		0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
		0x3d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x62, 0x61,
		0x6e, 0x64
	]);
	let packet = {
		headers: {
			'@id':   13337,
			'@type': 'response'
		},
		payload: {
			questions: [{
				domain: 'radar.tholian.network',
				type:   'TXT',
				value:  null
			}],
			answers: [{
				domain: 'radar.tholian.network',
				type:   'TXT',
				value:  [
					Buffer.from('version=X0:2021-12-31', 'utf8')
				]
			}, {
				domain: 'radar.tholian.network',
				type:   'TXT',
				value:  [
					Buffer.from('connection=broadband', 'utf8')
				]
			}]
		}
	};

	assert(DNS.encode(connection, packet), buffer);

});


export default finish('stealth/packet/DNS', {
	internet: false,
	network:  false,
	ports:    []
});

